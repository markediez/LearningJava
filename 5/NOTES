While Loop
    // initialize

    // while loop condition
        // code
        // condition changer

For Loop
    for(initial; condition; increment) {
        // code
    }

do ... while
    - checks the condition after running the code once
    - code always runs at least once
    do {
        // code
    } while(/*condition*/)

Scope
    - local var. only exist in the method that makes it
    - for initialization var. can only exist in the for loop

Infinite Loops
    - Be sure there's a way out of the loop statements

Formatting with Field Widths and Justification
    - %20s
        o default right justified, for left %-20s
        o String width size is 20 characters minimum

static method
    - remember we can do Math.pow(...) because pow is a static method
        o static method means we can use it without having to 
                create an instance of Math

BigDecimal
    - Precise monetary calculations should not be handled with
      double or float
        o they are not precise

Switch Statements
    - is like a cleaner looking else if
    
    // if value == val1 do that block of code
    switch(value) {
        case val1:
            // code
            break;  // breaks away from switch statement, if forgotten, it
        case val2:      // runs val2 code as well
            // code
            break;
        default:    // runs if value != val1 or val2
            break;
    }

    - val1, val2, ... can be integer constants, char constants, or 
                            enum constants, or even constant variables
                            (introduced ch 6)       (introduced ch 10)


break and continue
    - used to alter the flow of control
    - break
        o causes immediate exit from loop or switch
          statements
    - continue
        o causes to immediate proceed to the next iteration of the loop

Logical Operators
    - conditional AND (&&)
        o runs the code of all conditions in the statement is true
            if (<this condition is true> && <also this statement> && ...)
    - conditional OR (||)
        o runs the code if at least one condition in the statement is true
            if(<this condition is true> || <OR this statement> || ...)
    - conditional statements are short-circuit evaluations 
        o they end as soon as the condition is met / not met
    
    - boolean logical AND (&), boolean logical OR(|)
        o works the same as their conditional counterpart BUT
            they do not perform short-circuit evaluation
    - logical NOT (!)
        o reverses the boolean statement 

Structured Programming Summary
    -
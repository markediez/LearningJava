Creating Own Class & Methods
    - is creating a new type
    - instance variables
        o keeps data for the class
        o located inside the class but outside the methods
    - methods
        o behaviors a class can do
        o first line is the method header
        o parameter list inside the parenthesis
        o return type after "public" / "private"
        o "void" does not return anything

        =======================================
        <accessModifier> <returnType> <methodName>(<parameterList) {
        	// any variables named here, are local
        	// they only exist in here
        	// var. name @ parameterList are local var. too

        	// method is enclosed by the braces
        }
        =======================================
        public void setName(String name) { 
        	String tmp = name;	// local var. ex. *unnecessary
        	
        	// local var. take precedence over global var
        	// this - indicates to use the global var. "name"
        	this.name = tmp;
        }
        =======================================
        public String getName() {
        	// returns to the caller the String value of this.name
        	return this.name;
        }
       	=======================================

Use BigDecimal instead of double / int for monetary values
A Java app needs a main() in the class, else its just a Java file

Driver Class
	- the class with the main method that uses other files w/o main

. (dot separator)
	- used to access the methods of a public properties of a class

arguments
	- used to accomodate the parameter list
    - must have match the parameter list's requirement

Compile
    - must have Driver and Non Driver classes

UML Diagram
    - used to summarize class properties and methods
    - top compartment has class name
    - middle compartment has properties
    - bottom compartment has methods
    - +/- indicate public / private
    ===================================
    Account
    ===================================
    - name: String
    ===================================
    <<constructor>> Account(name: String)
    + setName(name: String)
    + getName(): String
    ===================================

import
    - implicit imports like java.lang = we can use System and String
    - explicit imports like java.util.Scanner needed to use Scanner
    - no need to import things in the same directory / package
    - can bypass importing via 
        java.util.Scanner scn = new java.util.Scanner(System.in);

private: using getters and setters
    - with public, programmers can input invalid data
    - using getter and setter
        ~ get data in desired format, e.g. getGrade() return A instead of 90
        ~ check valid data to set and return if invalid data

Primitive vs Reference Types
    - int, char, boolean, etc. are primitive types that store 1 value
    - anything that isn't a primitive is a reference type
    - instance variables are initialized to 0 / false
    - reference Types are initialized to null

Class Constructor
    - Method used to initialize members of a class
    - Name must be the same as the class
    - Cannot return values
    - When no explicit constructor is made, java makes an empty one


float vs double
    - float holds up to 7 significant digits
    - double holds up to 15 significant digits

local variable
    - is not initialized automatically

methods
    - use it to replace duplicate code reduce size and increase
            maintainability of the program